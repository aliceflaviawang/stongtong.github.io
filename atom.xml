<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>XTong notes</title>
  <subtitle>Live beautifully, dream passionately, love completely</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://stongtong.github.io/"/>
  <updated>2017-03-30T12:53:02.518Z</updated>
  <id>https://stongtong.github.io/</id>
  
  <author>
    <name>X T W</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Python——3.6.1改动</title>
    <link href="https://stongtong.github.io/2017/03/30/Python%E2%80%94%E2%80%943-6-1%E6%94%B9%E5%8A%A8/"/>
    <id>https://stongtong.github.io/2017/03/30/Python——3-6-1改动/</id>
    <published>2017-03-30T02:29:21.000Z</published>
    <updated>2017-03-30T12:53:02.518Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://onco8ybky.bkt.clouddn.com/boy.jpg" class="full-image"><br><div class="note primary"><h4 id="本文作者：tongtong"><a href="#本文作者：tongtong" class="headerlink" title="本文作者：tongtong"></a>本文作者：tongtong</h4><h4 id="本文链接：https-stongtong-github-io-2016-05-05-重-庆"><a href="#本文链接：https-stongtong-github-io-2016-05-05-重-庆" class="headerlink" title="本文链接：https://stongtong.github.io/2016/05/05/重-庆/"></a>本文链接：<a href="https://stongtong.github.io/2016/05/05/重-庆/">https://stongtong.github.io/2016/05/05/重-庆/</a></h4><h4 id="版权申明：网站内容为tongtong所有，转载请注明出处。"><a href="#版权申明：网站内容为tongtong所有，转载请注明出处。" class="headerlink" title="版权申明：网站内容为tongtong所有，转载请注明出处。"></a>版权申明：网站内容为tongtong所有，转载请注明出处。</h4></div></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://onco8ybky.bkt.clouddn.com/boy.jpg&quot; class=&quot;full-image&quot;&gt;&lt;br&gt;&lt;div class=&quot;note primary&quot;&gt;&lt;h4 id=&quot;本文作者：tongtong&quot;&gt;&lt;a href=&quot;#本文作
    
    </summary>
    
      <category term="Thu Mar 30 2017 10:29:21 GMT+0800 (中国标准时间)" scheme="https://stongtong.github.io/categories/Thu-Mar-30-2017-10-29-21-GMT-0800-%E4%B8%AD%E5%9B%BD%E6%A0%87%E5%87%86%E6%97%B6%E9%97%B4/"/>
    
    
  </entry>
  
  <entry>
    <title>Python——接口中self</title>
    <link href="https://stongtong.github.io/2017/03/28/Python%E2%80%94%E2%80%94%E6%8E%A5%E5%8F%A3%E4%B8%ADself/"/>
    <id>https://stongtong.github.io/2017/03/28/Python——接口中self/</id>
    <published>2017-03-28T13:34:34.000Z</published>
    <updated>2017-03-30T13:05:44.672Z</updated>
    
    <content type="html"><![CDATA[<p><img src="http://onco8ybky.bkt.clouddn.com/boy.jpg" alt="布列农--《男孩》"><br><a id="more"></a><br>学习Python，就顺便看了一下安装自带的接口文档，但是每个函数中都有一个self的参数，结果就顺便百度了一下，大家都已经讨论的很多了，在这总结记录一下，方便自己学习。</p>
<h3 id="self说明"><a href="#self说明" class="headerlink" title="self说明"></a>self说明</h3><p><strong> self代表类的实例，而非类 </strong></p>
<h3 id="实例1"><a href="#实例1" class="headerlink" title="实例1"></a>实例1</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">class SelfTest:</div><div class="line">	def prt(self):</div><div class="line">		print(self)</div><div class="line">		print(self.__class__)</div><div class="line">		</div><div class="line">t = SelfTest()</div><div class="line">t.prt()</div></pre></td></tr></table></figure>
<p>计算结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;__main__.SelfTest object at 0x00000093147BD518&gt;</div><div class="line">&lt;class &apos;__main__.SelfTest&apos;&gt;</div></pre></td></tr></table></figure></p>
<p>打印SelfTest信息，打印出该对象的地址，而其类名为SelfTest，说明self为SelfTest的实例。</p>
<h3 id="实例2"><a href="#实例2" class="headerlink" title="实例2"></a>实例2</h3><p>对于学过Java的人来说，this是比较熟悉的，this为特定关键字，那么self可以改变吗？本实例说明。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class SelfTest:</div><div class="line">	def prt(self):</div><div class="line">		print(self)</div><div class="line">		print(self.__class__)</div><div class="line">		</div><div class="line">class ThisTest:</div><div class="line">	def prt(this):</div><div class="line">		print(this)</div><div class="line">		print(this.__class__)</div><div class="line">		</div><div class="line">t = SelfTest()</div><div class="line">t.prt()</div><div class="line">t = ThisTest()</div><div class="line">t.prt()</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;__main__.SelfTest object at 0x0000002D5315DB00&gt;</div><div class="line">&lt;class &apos;__main__.SelfTest&apos;&gt;</div><div class="line">&lt;__main__.ThisTest object at 0x0000002D5315DBA8&gt;</div><div class="line">&lt;class &apos;__main__.ThisTest&apos;&gt;</div></pre></td></tr></table></figure></p>
<p>在Python内部解释器中，Python会将self替换成实例来运行，解释为TestSelf.prt(self),示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class SelfTest:</div><div class="line">	def prt(self):</div><div class="line">		print(self)</div><div class="line">		print(self.__class__)</div><div class="line">		</div><div class="line">class ThisTest:</div><div class="line">	def prt(this):</div><div class="line">		print(this)</div><div class="line">		print(this.__class__)</div><div class="line">		</div><div class="line">t = SelfTest()</div><div class="line">t.prt()</div><div class="line">SelfTest.prt(t)</div><div class="line">ThisTest.prt(t)</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;__main__.SelfTest object at 0x0000024C9F09DB38&gt;</div><div class="line">&lt;class &apos;__main__.SelfTest&apos;&gt;</div><div class="line">&lt;__main__.SelfTest object at 0x0000024C9F09DB38&gt;</div><div class="line">&lt;class &apos;__main__.SelfTest&apos;&gt;</div><div class="line">&lt;__main__.SelfTest object at 0x0000024C9F09DB38&gt;</div><div class="line">&lt;class &apos;__main__.SelfTest&apos;&gt;</div></pre></td></tr></table></figure></p>
<p>运行结果即如解释所述。</p>
<h3 id="实例三"><a href="#实例三" class="headerlink" title="实例三"></a>实例三</h3><p>如果函数没有在定义时知名self实例变量，则在函数内部是不能再进行self调用的，实例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class Test:</div><div class="line">	def test():</div><div class="line">		print(self)</div><div class="line">		</div><div class="line">t = Test()</div><div class="line">t.test()</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;selfDefinition.py&quot;, line 17, in &lt;module&gt;</div><div class="line">    t.test()</div><div class="line">TypeError: test() takes 0 positional arguments but 1 was given</div></pre></td></tr></table></figure></p>
<p>test中没有指定self实例，当在test的中再进行self调用时，即为非法调用，强行传入一个位置参数。</p>
<h3 id="实例四"><a href="#实例四" class="headerlink" title="实例四"></a>实例四</h3><p>如果在定义和调用时，都不进行实例self的指定，则该函数为类函数，示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">class Test:</div><div class="line">	def test():</div><div class="line">		print(__class__)</div><div class="line">		</div><div class="line">t = Test()</div><div class="line">t.test()</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Traceback (most recent call last):</div><div class="line">  File &quot;selfDefinition.py&quot;, line 18, in &lt;module&gt;</div><div class="line">    t.test()</div><div class="line">TypeError: test() takes 0 positional arguments but 1 was given</div></pre></td></tr></table></figure></p>
<p>该运行结果是因为该函数为类函数，不能通过实例的形式进行调用。<br>如果将运行代码换为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Test.test()</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;class &apos;__main__.Test&apos;&gt;</div></pre></td></tr></table></figure></p>
<p>运行正确，类函数的正确调用方式。</p>
<p>不能在函数定义的时候省略，这样函数会认为该函数并没有参数，</p>
<h3 id="实例五"><a href="#实例五" class="headerlink" title="实例五"></a>实例五</h3><p>正如实例二中所写的，代码中SelfTest和ThisTest都为相应类，但是当传入实例t时，两个函数运行结果都为SelfTest，说明只要参数指定实例，运行中的实例就是该实例，而不是确定的函数所在类的实例。<br>在继承时，传入指定实例，就是那个传入的实例，而不是指定义self的类的实例，具体实例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">class Parent:</div><div class="line">    def pprt(self):</div><div class="line">        print(self)</div><div class="line"> </div><div class="line">class Child(Parent):</div><div class="line">    def cprt(self):</div><div class="line">        print(self)</div><div class="line">c = Child()</div><div class="line">c.cprt()</div><div class="line">c.pprt()</div><div class="line">p = Parent()</div><div class="line">p.pprt()</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;__main__.Child object at 0x0000022C2D126080&gt;</div><div class="line">&lt;__main__.Child object at 0x0000022C2D126080&gt;</div><div class="line">&lt;__main__.Parent object at 0x0000022C2D1260F0&gt;</div></pre></td></tr></table></figure></p>
<p>c的实例为child，不论调用cprt还是pprt，其self都为child。<strong>pprt为其调用的父类中的方法，传入子类实例</strong>。</p>
<h3 id="实例六"><a href="#实例六" class="headerlink" title="实例六"></a>实例六</h3><p>在描述符类中，self指的是描述符类的实例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">class Desc:</div><div class="line">    def __get__(self, ins, cls):</div><div class="line">        print(&apos;self in Desc: %s &apos; % self )</div><div class="line">        print(self, ins, cls)</div><div class="line">class Test:</div><div class="line">    x = Desc()</div><div class="line">    def prt(self):</div><div class="line">        print(&apos;self in Test: %s&apos; % self)</div><div class="line">t = Test()</div><div class="line">t.prt()</div><div class="line">t.x</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">self in Test: &lt;__main__.Test object at 0x00000240B95472B0&gt;</div><div class="line">self in Desc: &lt;__main__.Desc object at 0x00000240B9547240&gt; </div><div class="line">&lt;__main__.Desc object at 0x00000240B9547240&gt; &lt;__main__.Test object at 0x00000240B95472B0&gt; &lt;class &apos;__main__.Test&apos;&gt;</div></pre></td></tr></table></figure></p>
<p>t.prt输出的是t的实例，但是t.x输出的是Desc的实例，这是由于调用t.x，即是Test类的实例t的属性x，由于实例t中并没有定义属性x，所以找到类属性x，而该属性是描述符属性，为Desc类的实例而已，所以此处并没有顶用Test任何方法，直接通过类进行调用也能得到相同的结果。<br>将其上代码换为如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">t = Test()</div><div class="line">Test.prt(t)</div><div class="line">Test.x</div></pre></td></tr></table></figure></p>
<p>运行结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">self in Test: &lt;__main__.Test object at 0x00000143AA1972E8&gt;</div><div class="line">self in Desc: &lt;__main__.Desc object at 0x00000143AA197278&gt; </div><div class="line">&lt;__main__.Desc object at 0x00000143AA197278&gt; None &lt;class &apos;__main__.Test&apos;&gt;</div></pre></td></tr></table></figure></p>
<p>与上述结果一致。<br>题外话：由于在很多时候描述符类中仍然需要知道调用该描述符的实例是谁，所以在描述符类中存在第二个参数ins，用来表示调用它的类实例，所以t.x时可以看到第三行中的运行结果中第二项为<__main__.test object="" at="" 0x00000240b95472b0="">。而采用Test.x进行调用时，由于没有实例，所以返回None。</__main__.test></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><ul>
<li>self在定义时需要定义，但是在调用时会自动传入。</li>
<li>self的名字并不是规定死的，但是最好还是按照约定是用self</li>
<li>self总是指调用时的类的实例。<div class="note primary"><h4 id="本文作者：tongtong"><a href="#本文作者：tongtong" class="headerlink" title="本文作者：tongtong"></a>本文作者：tongtong</h4><h4 id="本文链接：https-stongtong-github-io-2017-03-28-Python——接口中self"><a href="#本文链接：https-stongtong-github-io-2017-03-28-Python——接口中self" class="headerlink" title="本文链接：https://stongtong.github.io/2017/03/28/Python——接口中self/"></a>本文链接：<a href="https://stongtong.github.io/2017/03/28/Python——接口中self/">https://stongtong.github.io/2017/03/28/Python——接口中self/</a></h4><h4 id="版权申明：网站内容为tongtong所有，转载请注明出处。"><a href="#版权申明：网站内容为tongtong所有，转载请注明出处。" class="headerlink" title="版权申明：网站内容为tongtong所有，转载请注明出处。"></a>版权申明：网站内容为tongtong所有，转载请注明出处。</h4></div>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://onco8ybky.bkt.clouddn.com/boy.jpg&quot; alt=&quot;布列农--《男孩》&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="python" scheme="https://stongtong.github.io/categories/python/"/>
    
    
      <category term="python" scheme="https://stongtong.github.io/tags/python/"/>
    
      <category term="接口" scheme="https://stongtong.github.io/tags/%E6%8E%A5%E5%8F%A3/"/>
    
      <category term="self" scheme="https://stongtong.github.io/tags/self/"/>
    
  </entry>
  
  <entry>
    <title>Next主题内置标签</title>
    <link href="https://stongtong.github.io/2017/03/23/Next%E4%B8%BB%E9%A2%98%E5%86%85%E7%BD%AE%E6%A0%87%E7%AD%BE/"/>
    <id>https://stongtong.github.io/2017/03/23/Next主题内置标签/</id>
    <published>2017-03-23T11:23:49.000Z</published>
    <updated>2017-03-25T02:49:52.635Z</updated>
    
    <content type="html"><![CDATA[<p>该文章测试next主题中的图片表示，因为看到官网上有很多的内置标签，测试一下，方便以后使用。</p>
<h3 id="字体居中"><a href="#字体居中" class="headerlink" title="字体居中"></a>字体居中</h3><h4 id="HTML方式"><a href="#HTML方式" class="headerlink" title="HTML方式"></a>HTML方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;blockquote class=&quot;blockquote-center&quot;&gt;该部分为文字居中&lt;/blockquote&gt;</div></pre></td></tr></table></figure>
<p><blockquote class="blockquote-center">该部分为文字居中</blockquote><br><a id="more"></a></p>
<h4 id="内置标签方式"><a href="#内置标签方式" class="headerlink" title="内置标签方式"></a>内置标签方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% centerquote %&#125;blah blah blah&#123;% endcenterquote %&#125;</div></pre></td></tr></table></figure>
<blockquote class="blockquote-center"><p>居中文字标签模式</p>
</blockquote>
<p>标签简写模式<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 标签别名 --&gt;</div><div class="line">&#123;% cq %&#125; blah blah blah &#123;% endcq %&#125;</div></pre></td></tr></table></figure></p>
<h3 id="突破宽度限制图片"><a href="#突破宽度限制图片" class="headerlink" title="突破宽度限制图片"></a>突破宽度限制图片</h3><p>当使用此标签引用图片时，图片将自动扩大 26%，并突破文章容器的宽度。 此标签使用于需要突出显示的图片, 图片的扩大与容器的偏差从视觉上提升图片的吸引力。 此标签有两种调用方式（详细参看底下示例）：</p>
<h4 id="HTML方式：使用这种方式时，为-img-添加属性-class-”full-image”即可。"><a href="#HTML方式：使用这种方式时，为-img-添加属性-class-”full-image”即可。" class="headerlink" title="HTML方式：使用这种方式时，为 img 添加属性 class=”full-image”即可。"></a>HTML方式：使用这种方式时，为 img 添加属性 class=”full-image”即可。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;img src=&quot;/image-url&quot; class=&quot;full-image&quot; /&gt;</div></pre></td></tr></table></figure>
<p><img src="http://i.imgur.com/drFzc4r.jpg" class="full-image"><br><!-- more --></p>
<h4 id="标签方式：使用-fullimage-或者-简写-fi，-并传递图片地址、-alt-和-title-属性即可。-属性之间以逗号分隔。"><a href="#标签方式：使用-fullimage-或者-简写-fi，-并传递图片地址、-alt-和-title-属性即可。-属性之间以逗号分隔。" class="headerlink" title="标签方式：使用 fullimage 或者 简写 fi， 并传递图片地址、 alt 和 title 属性即可。 属性之间以逗号分隔。"></a>标签方式：使用 fullimage 或者 简写 fi， 并传递图片地址、 alt 和 title 属性即可。 属性之间以逗号分隔。</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% fullimage /image-url, alt, title %&#125;</div></pre></td></tr></table></figure>
<span itemprop="image" itemscope="" itemtype="http://schema.org/ImageObject"><img itemprop="url image" src="http://i.imgur.com/drFzc4r.jpg" class="full-image" alt="这里是alt" title="这是图片名称"><meta itemprop="width" content="auto"><meta itemprop="height" content="auto"></span>
<p>可以简写为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 别名 --&gt;</div><div class="line">&#123;% fi /image-url, alt, title %&#125;</div></pre></td></tr></table></figure></p>
<h4 id="这里是markdown自带的显示："><a href="#这里是markdown自带的显示：" class="headerlink" title="这里是markdown自带的显示："></a>这里是markdown自带的显示：</h4><p><img src="http://i.imgur.com/drFzc4r.jpg" alt="图片名称显示在哪"></p>
<p>以上三种比较，很是明显。</p>
<h3 id="bootstrap-callout"><a href="#bootstrap-callout" class="headerlink" title="bootstrap callout"></a>bootstrap callout</h3><h4 id="使用方式"><a href="#使用方式" class="headerlink" title="使用方式"></a>使用方式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&#123;% note class_name %&#125; Content (md partial supported) &#123;% endnote %&#125;</div></pre></td></tr></table></figure>
<p>其中，class_name 可以是以下列表中的一个值：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">default</div><div class="line">primary</div><div class="line">success</div><div class="line">info</div><div class="line">warning</div><div class="line">danger</div></pre></td></tr></table></figure></p>
<h4 id="演示效果"><a href="#演示效果" class="headerlink" title="演示效果"></a>演示效果</h4><div class="note default"><p>此类别为default </p>
</div>
<div class="note primary"><p>此类别为primary </p>
</div>
<div class="note success"><p>此类别为success </p>
</div>
<div class="note info"><p>此类别为info </p>
</div>
<div class="note warning"><p>此类别为warning</p>
</div>
<div class="note danger"><p>此类别为danger</p>
</div>
<div class="note primary"><h4 id="本文作者：tongtong"><a href="#本文作者：tongtong" class="headerlink" title="本文作者：tongtong"></a>本文作者：tongtong</h4><h4 id="本文链接：https-stongtong-github-io-2016-05-05-重-庆"><a href="#本文链接：https-stongtong-github-io-2016-05-05-重-庆" class="headerlink" title="本文链接：https://stongtong.github.io/2016/05/05/重-庆/"></a>本文链接：<a href="https://stongtong.github.io/2016/05/05/重-庆/">https://stongtong.github.io/2016/05/05/重-庆/</a></h4><h4 id="版权申明：网站内容为tongtong所有，转载请注明出处。"><a href="#版权申明：网站内容为tongtong所有，转载请注明出处。" class="headerlink" title="版权申明：网站内容为tongtong所有，转载请注明出处。"></a>版权申明：网站内容为tongtong所有，转载请注明出处。</h4></div>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;该文章测试next主题中的图片表示，因为看到官网上有很多的内置标签，测试一下，方便以后使用。&lt;/p&gt;
&lt;h3 id=&quot;字体居中&quot;&gt;&lt;a href=&quot;#字体居中&quot; class=&quot;headerlink&quot; title=&quot;字体居中&quot;&gt;&lt;/a&gt;字体居中&lt;/h3&gt;&lt;h4 id=&quot;HTML方式&quot;&gt;&lt;a href=&quot;#HTML方式&quot; class=&quot;headerlink&quot; title=&quot;HTML方式&quot;&gt;&lt;/a&gt;HTML方式&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;blockquote class=&amp;quot;blockquote-center&amp;quot;&amp;gt;该部分为文字居中&amp;lt;/blockquote&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;该部分为文字居中&lt;/blockquote&gt;&lt;br&gt;
    
    </summary>
    
      <category term="note" scheme="https://stongtong.github.io/categories/note/"/>
    
    
      <category term="next" scheme="https://stongtong.github.io/tags/next/"/>
    
      <category term="主题" scheme="https://stongtong.github.io/tags/%E4%B8%BB%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Hexo常用命令记录</title>
    <link href="https://stongtong.github.io/2016/08/30/Hexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95/"/>
    <id>https://stongtong.github.io/2016/08/30/Hexo常用命令记录/</id>
    <published>2016-08-30T08:52:43.000Z</published>
    <updated>2017-03-25T02:50:26.834Z</updated>
    
    <content type="html"><![CDATA[<h3 id="简写"><a href="#简写" class="headerlink" title="简写"></a>简写</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; //新建文章</div><div class="line">hexo new page &quot;我的类别&quot;  //新建目录下的page</div><div class="line">hexo p == hexo publish    //发布草稿到站点,其用法为hexo publish [layout] &lt;title&gt;</div><div class="line">hexo g == hexo generate  //生成</div><div class="line">hexo s == hexo server  //启动服务，当端口冲突时，其可以使用参数p更改端口，具体用法为hexo s -p 端口号</div><div class="line">hexo d == hexo deploy  //部署</div><div class="line">hexo c == hexo clean  //清楚生成文件</div></pre></td></tr></table></figure>
<a id="more"></a>
<h3 id="hexo中使用模板"><a href="#hexo中使用模板" class="headerlink" title="hexo中使用模板"></a>hexo中使用模板</h3><p>在hexo根目录下的scaffolds文件下，有生成创建文章的模板，在生成时，可以进行模板指定：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">hexo new photo &quot;My Gallery&quot;  //photo为指定模板，创建时其会到scaffolds文件下查找photo.md文件，进行相册的创建。</div></pre></td></tr></table></figure></p>
<h3 id="前置声明"><a href="#前置声明" class="headerlink" title="前置声明"></a>前置声明</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">layout: 布局，默认为post</div><div class="line">title: 文章名称</div><div class="line">date: 创建时间</div><div class="line">updated: 修改时间</div><div class="line">comments: 评论开关</div><div class="line">tags: 标签</div><div class="line">categories: 类别</div><div class="line">permalink: 永久链接</div></pre></td></tr></table></figure>
<h3 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h3><p>基本就是这么多了，以后用到在继续添加。<br><div class="note primary"><h4 id="本文作者：tongtong"><a href="#本文作者：tongtong" class="headerlink" title="本文作者：tongtong"></a>本文作者：tongtong</h4><h4 id="本文链接：https-stongtong-github-io-2016-05-05-重-庆"><a href="#本文链接：https-stongtong-github-io-2016-05-05-重-庆" class="headerlink" title="本文链接：https://stongtong.github.io/2016/05/05/重-庆/"></a>本文链接：<a href="https://stongtong.github.io/2016/05/05/重-庆/">https://stongtong.github.io/2016/05/05/重-庆/</a></h4><h4 id="版权申明：网站内容为tongtong所有，转载请注明出处。"><a href="#版权申明：网站内容为tongtong所有，转载请注明出处。" class="headerlink" title="版权申明：网站内容为tongtong所有，转载请注明出处。"></a>版权申明：网站内容为tongtong所有，转载请注明出处。</h4></div></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;简写&quot;&gt;&lt;a href=&quot;#简写&quot; class=&quot;headerlink&quot; title=&quot;简写&quot;&gt;&lt;/a&gt;简写&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;hexo n &amp;quot;我的博客&amp;quot; == hexo new &amp;quot;我的博客&amp;quot; //新建文章&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo new page &amp;quot;我的类别&amp;quot;  //新建目录下的page&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo p == hexo publish    //发布草稿到站点,其用法为hexo publish [layout] &amp;lt;title&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo g == hexo generate  //生成&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo s == hexo server  //启动服务，当端口冲突时，其可以使用参数p更改端口，具体用法为hexo s -p 端口号&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo d == hexo deploy  //部署&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo c == hexo clean  //清楚生成文件&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="note" scheme="https://stongtong.github.io/categories/note/"/>
    
    
      <category term="Hexo" scheme="https://stongtong.github.io/tags/Hexo/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://stongtong.github.io/2016/08/29/Hello%20World/"/>
    <id>https://stongtong.github.io/2016/08/29/Hello World/</id>
    <published>2016-08-29T08:52:43.000Z</published>
    <updated>2017-03-25T02:50:45.030Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to XTong note.</p>
<div class="note primary"><h4 id="本文作者：tongtong"><a href="#本文作者：tongtong" class="headerlink" title="本文作者：tongtong"></a>本文作者：tongtong</h4><h4 id="本文链接：https-stongtong-github-io-2016-05-05-重-庆"><a href="#本文链接：https-stongtong-github-io-2016-05-05-重-庆" class="headerlink" title="本文链接：https://stongtong.github.io/2016/05/05/重-庆/"></a>本文链接：<a href="https://stongtong.github.io/2016/05/05/重-庆/">https://stongtong.github.io/2016/05/05/重-庆/</a></h4><h4 id="版权申明：网站内容为tongtong所有，转载请注明出处。"><a href="#版权申明：网站内容为tongtong所有，转载请注明出处。" class="headerlink" title="版权申明：网站内容为tongtong所有，转载请注明出处。"></a>版权申明：网站内容为tongtong所有，转载请注明出处。</h4></div>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Welcome to XTong note.&lt;/p&gt;
&lt;div class=&quot;note primary&quot;&gt;&lt;h4 id=&quot;本文作者：tongtong&quot;&gt;&lt;a href=&quot;#本文作者：tongtong&quot; class=&quot;headerlink&quot; title=&quot;本文作者：tongt
    
    </summary>
    
      <category term="life" scheme="https://stongtong.github.io/categories/life/"/>
    
    
      <category term="life" scheme="https://stongtong.github.io/tags/life/"/>
    
  </entry>
  
  <entry>
    <title>github搭建各站记录</title>
    <link href="https://stongtong.github.io/2016/08/29/GitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E8%AE%B0%E5%BD%95/"/>
    <id>https://stongtong.github.io/2016/08/29/GitHub搭建个人网站记录/</id>
    <published>2016-08-29T08:52:43.000Z</published>
    <updated>2017-03-25T02:50:37.173Z</updated>
    
    <content type="html"><![CDATA[<p>本次搭建主要使用hexo blog自动发布完成</p>
<h3 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h3><p>1、下载node js和git，安装完成后，在node js中利用npm进行hexo的安装：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install -g hexo-cli</div></pre></td></tr></table></figure>
<p>2、在指定目录下初始化hexo目录， </p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">hexo ini hexo</div><div class="line">cd hexo</div><div class="line">npm install</div></pre></td></tr></table></figure>
<a id="more"></a>
<p>这里的目录名称为hexo,将以上软件安装好之后，将原hexo文件夹下的文件目录统一存放在新建的hexo文件下即可，基本的框架搭建完成。</p>
<h3 id="部署功能"><a href="#部署功能" class="headerlink" title="部署功能"></a>部署功能</h3><p>要将写好的文件进行部署，需要安装插件，安装步骤为</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-deployer-git --save</div></pre></td></tr></table></figure>
<p>安装完毕使用hexo d命令进行部署。</p>
<h3 id="RSS功能和mapsite功能"><a href="#RSS功能和mapsite功能" class="headerlink" title="RSS功能和mapsite功能"></a>RSS功能和mapsite功能</h3><p>进行Rss功能扩展需要安装插件，</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-feed --save</div></pre></td></tr></table></figure>
<p>安装完毕后，会在hexo目录中出现node_modules文件夹，然后需要在hexo配置文件和主题配置文件中进行配置如下：<br>1、hexo配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">feed:</div><div class="line">  type: atom</div><div class="line">  path: atom.xml</div><div class="line">  limit: 20</div><div class="line">  hub:</div></pre></td></tr></table></figure></p>
<p>2、主题配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">rss: /atom.xml</div></pre></td></tr></table></figure></p>
<p>然后重启博客，在生成文件时，就会产生atom.xml文件，显示安装成功。<br>安装百度map-site功能<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-baidu-mapsite --save</div></pre></td></tr></table></figure></p>
<p>1、在hexo配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">baidusitemap:</div><div class="line">    path: baidusitemap.xml</div></pre></td></tr></table></figure></p>
<p>2、在主题配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sitemap: /baidusitemap.xml</div></pre></td></tr></table></figure></p>
<p>重启博客后，点击查看。</p>
<h3 id="百度统计功能"><a href="#百度统计功能" class="headerlink" title="百度统计功能"></a>百度统计功能</h3><p>注册百度账号，获取下图中指定位置编码，在主题配置文件中进行设置即可。<br><img src="http://i.imgur.com/Si3wkQn.png" alt=""></p>
<h3 id="自定义站点搜索"><a href="#自定义站点搜索" class="headerlink" title="自定义站点搜索"></a>自定义站点搜索</h3><p>安装插件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install hexo-generator-searchdb --save</div></pre></td></tr></table></figure></p>
<p>1、在hexo配置文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">search:</div><div class="line">  path: search.xml</div><div class="line">  field: post</div><div class="line">  format: html</div><div class="line">  limit: 10000</div></pre></td></tr></table></figure></p>
<p>2、在主题文件中配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">local_search:</div><div class="line">  enable: true</div></pre></td></tr></table></figure></p>
<h3 id="配置分类和标签"><a href="#配置分类和标签" class="headerlink" title="配置分类和标签"></a>配置分类和标签</h3><p>next主题中的分类和标签要通过新建index文件来产生。具体操作如下<br>运行 hexo new page tags 命令后会产生 source/tags/index.md 这个文件，你要修改这个文件，在里面添加一句话type: “tags”。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">title: &quot;tags&quot;</div><div class="line">date: 2015-03-24 08:58:02</div></pre></td></tr></table></figure></p>
<p>添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">type: &quot;tags&quot;</div></pre></td></tr></table></figure></p>
<p>然后运行服务器即可访问tags页面了。</p>
<p>在 2015-05-29 06:22:57，”Leon Lin” notifications@github.com 写道：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">$ cd path/to/hexo</div><div class="line">$ hexo new page tags</div><div class="line">$ hexo new page categories</div><div class="line">$ vim source/tags/index.md</div><div class="line"></div><div class="line">add line: type: &quot;tags&quot;</div><div class="line"></div><div class="line">$ vim source/categories/index.md</div><div class="line"></div><div class="line">add line: type: &quot;categories&quot;</div><div class="line"></div><div class="line">$ hexo d -g</div></pre></td></tr></table></figure></p>
<p>做完之後產生的 /tags/index.html 裡面沒有顯示出所用的tag…</p>
<h3 id="添加评论"><a href="#添加评论" class="headerlink" title="添加评论"></a>添加评论</h3><p>next主题支持多说、友言、畅言、来必力等评论系统，这里说一下，多说已经与17年6月关闭了自己的评论系统，原因估计是不赚钱，友言的评论系统很是难用这里也不多说了，畅言系统要求必须要有国内的ICP备案号，这一点比较坑，自己搭个各站，还要去备案，太过复杂，这里就只剩下来必力了，不过这几种，我都有尝试，下面都会一一介绍。</p>
<p>在友言注册账号，在主题配置文件中找到友言配置项，并输入uid即可<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">youyan_uid: @@@@@@@@</div></pre></td></tr></table></figure></p>
<p>友言账号<br><img src="http://i.imgur.com/Cls24sQ.png" alt=""></p>
<p>畅言一样，需要注册，贴入ID即可<br><img src="http://i.imgur.com/tLTdMtg.png" alt=""></p>
<p>其他的都大同小异，这里不再多说了</p>
<h3 id="添加阅读统计"><a href="#添加阅读统计" class="headerlink" title="添加阅读统计"></a>添加阅读统计</h3><p>在leancloud上注册账号，本账号具体为<br><img src="http://i.imgur.com/t9Aex4E.png" alt=""></p>
<p>然后新建一个应用，应用的名称可以随便选取，在该应用中新建一个class，class权限设置为最大，class名称为Counter，然后进入设置，可以获取ID和Key，如下图：<br><img src="http://i.imgur.com/VfmJsnt.png" alt=""></p>
<p>获取之后，在主题配置文件中进行设定：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">leancloud_visitors:</div><div class="line">  enable: true</div><div class="line">  app_id: C5p2It82joj83Mzm0milY5BK-gzGzoHsz</div><div class="line">  app_key: iDq8etLnrVzoVdfbWoOOow4L</div></pre></td></tr></table></figure></p>
<p>重启blog即可。</p>
<div class="note primary"><h4 id="本文作者：tongtong"><a href="#本文作者：tongtong" class="headerlink" title="本文作者：tongtong"></a>本文作者：tongtong</h4><h4 id="本文链接：https-stongtong-github-io-2016-05-05-重-庆"><a href="#本文链接：https-stongtong-github-io-2016-05-05-重-庆" class="headerlink" title="本文链接：https://stongtong.github.io/2016/05/05/重-庆/"></a>本文链接：<a href="https://stongtong.github.io/2016/05/05/重-庆/">https://stongtong.github.io/2016/05/05/重-庆/</a></h4><h4 id="版权申明：网站内容为tongtong所有，转载请注明出处。"><a href="#版权申明：网站内容为tongtong所有，转载请注明出处。" class="headerlink" title="版权申明：网站内容为tongtong所有，转载请注明出处。"></a>版权申明：网站内容为tongtong所有，转载请注明出处。</h4></div>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;本次搭建主要使用hexo blog自动发布完成&lt;/p&gt;
&lt;h3 id=&quot;主要步骤&quot;&gt;&lt;a href=&quot;#主要步骤&quot; class=&quot;headerlink&quot; title=&quot;主要步骤&quot;&gt;&lt;/a&gt;主要步骤&lt;/h3&gt;&lt;p&gt;1、下载node js和git，安装完成后，在node js中利用npm进行hexo的安装：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install -g hexo-cli&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2、在指定目录下初始化hexo目录， &lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;hexo ini hexo&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;cd hexo&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;npm install&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="note" scheme="https://stongtong.github.io/categories/note/"/>
    
    
      <category term="github" scheme="https://stongtong.github.io/tags/github/"/>
    
      <category term="person" scheme="https://stongtong.github.io/tags/person/"/>
    
  </entry>
  
  <entry>
    <title>重  庆</title>
    <link href="https://stongtong.github.io/2016/05/05/%E9%87%8D-%E5%BA%86/"/>
    <id>https://stongtong.github.io/2016/05/05/重-庆/</id>
    <published>2016-05-05T12:45:12.000Z</published>
    <updated>2017-03-25T02:46:40.995Z</updated>
    
    <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a><blockquote class="blockquote-center"><p>重 庆<font size="1px">……..赵熙</font><br>自古西南镇，沧江日夜东。<br>水围巴子国，山压禹王宫。<br>鼓角人声外，华夷市气中。<br>石城非广武，何处问庞雄。 </p>
</blockquote></h1><p>满怀期待，计划一个月的重庆之旅就这样开启了……<br><div class="group-picture"><div class="group-picture-container"><div class="group-picture-row"><div class="group-picture-column" style="width: 100%;"><img src="http://i.imgur.com/ZDelyKr.jpg" alt=""></div></div><div class="group-picture-row"><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="http://i.imgur.com/ZPdHg8M.jpg" alt=""></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="http://i.imgur.com/oENJOou.jpg" alt=""></div><div class="group-picture-column" style="width: 33.333333333333336%;"><img src="http://i.imgur.com/mkqumaO.jpg" alt=""></div></div></div></div><br><a id="more"></a><br>租辆校车，乘着五一小长假，一群人就这么踏上了重庆之旅。<br>刚到磁器口，人来人往，好不热闹，<br><img src="http://onclsyizm.bkt.clouddn.com/1.jpg-github" alt=""><br>小饰品店，看着还挺漂亮的（一群大老爷们，呵呵）<br><img src="http://onclsyizm.bkt.clouddn.com/2.jpg-github" alt=""><br>来根冰棍消消暑，只想说五一的重庆已经热到不行<br><img src="http://onclsyizm.bkt.clouddn.com/3.jpg-github" alt=""><br>神龙峡一日游，<br><img src="http://onclsyizm.bkt.clouddn.com/4.jpg-github" alt=""><br>只想说，五一的神龙峡水——冰冷，玩过漂流的几个男人冷到不行，不过还是很开心，也就是洗个热水澡和换个衣服的事情（幸亏衣服带的多，要不然，裸奔？）<br><img src="http://onclsyizm.bkt.clouddn.com/5.jpg-github" alt=""><br>午夜一点的解放碑，还是人山人海，小卡片满天飞，，，，，，<br><img src="http://onclsyizm.bkt.clouddn.com/6.jpg-github" alt=""><br>凌晨两点的朝天门，貌似当时下雨了<br><img src="http://onclsyizm.bkt.clouddn.com/7.jpg-github" alt=""><br>回来的高速上，已经被川A大军全部覆盖<br><img src="http://onclsyizm.bkt.clouddn.com/8.jpg-github" alt=""></p>
<p>重庆的3日游，还是很happy，想到哪去哪，饿了吃，困了睡，也感谢大哥的导游，唯一美中不足的就是重庆好像并不太适合自驾去，城区山路太难开，是不是文奇？期待下一次的出发……<br><div class="note primary"><h4 id="本文作者：tongtong"><a href="#本文作者：tongtong" class="headerlink" title="本文作者：tongtong"></a>本文作者：tongtong</h4><h4 id="本文链接：https-stongtong-github-io-2016-05-05-重-庆"><a href="#本文链接：https-stongtong-github-io-2016-05-05-重-庆" class="headerlink" title="本文链接：https://stongtong.github.io/2016/05/05/重-庆/"></a>本文链接：<a href="https://stongtong.github.io/2016/05/05/重-庆/">https://stongtong.github.io/2016/05/05/重-庆/</a></h4><h4 id="版权申明：网站内容为tongtong所有，转载请注明出处。"><a href="#版权申明：网站内容为tongtong所有，转载请注明出处。" class="headerlink" title="版权申明：网站内容为tongtong所有，转载请注明出处。"></a>版权申明：网站内容为tongtong所有，转载请注明出处。</h4></div></p>
]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;&quot;&gt;&lt;a href=&quot;#&quot; class=&quot;headerlink&quot; title=&quot;&quot;&gt;&lt;/a&gt;&lt;blockquote class=&quot;blockquote-center&quot;&gt;&lt;p&gt;重 庆&lt;font size=1px&gt;……..赵熙&lt;/font&gt;&lt;br&gt;自古西南镇，沧江日夜东。&lt;br&gt;水围巴子国，山压禹王宫。&lt;br&gt;鼓角人声外，华夷市气中。&lt;br&gt;石城非广武，何处问庞雄。 &lt;/p&gt;
&lt;/blockquote&gt;&lt;/h1&gt;&lt;p&gt;满怀期待，计划一个月的重庆之旅就这样开启了……&lt;br&gt;&lt;div class=&quot;group-picture&quot;&gt;&lt;div class=&quot;group-picture-container&quot;&gt;&lt;div class=&quot;group-picture-row&quot;&gt;&lt;div class=&quot;group-picture-column&quot;  style=&quot;width: 100%;&quot;&gt;&lt;img src=&quot;http://i.imgur.com/ZDelyKr.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;group-picture-row&quot;&gt;&lt;div class=&quot;group-picture-column&quot;  style=&quot;width: 33.333333333333336%;&quot;&gt;&lt;img src=&quot;http://i.imgur.com/ZPdHg8M.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;div class=&quot;group-picture-column&quot;  style=&quot;width: 33.333333333333336%;&quot;&gt;&lt;img src=&quot;http://i.imgur.com/oENJOou.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;div class=&quot;group-picture-column&quot;  style=&quot;width: 33.333333333333336%;&quot;&gt;&lt;img src=&quot;http://i.imgur.com/mkqumaO.jpg&quot; alt=&quot;&quot;&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;/div&gt;&lt;br&gt;
    
    </summary>
    
      <category term="photo" scheme="https://stongtong.github.io/categories/photo/"/>
    
    
      <category term="重庆" scheme="https://stongtong.github.io/tags/%E9%87%8D%E5%BA%86/"/>
    
      <category term="旅行" scheme="https://stongtong.github.io/tags/%E6%97%85%E8%A1%8C/"/>
    
  </entry>
  
</feed>
