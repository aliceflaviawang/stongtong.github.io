<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[Python——3.6.1改动]]></title>
      <url>%2F2017%2F03%2F30%2FPython%E2%80%94%E2%80%943-6-1%E6%94%B9%E5%8A%A8%2F</url>
      <content type="text"><![CDATA[本文作者：tongtong本文链接：https://stongtong.github.io/2016/05/05/重-庆/版权申明：网站内容为tongtong所有，转载请注明出处。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Python——接口中self]]></title>
      <url>%2F2017%2F03%2F28%2FPython%E2%80%94%E2%80%94%E6%8E%A5%E5%8F%A3%E4%B8%ADself%2F</url>
      <content type="text"><![CDATA[学习之前要先娱乐一下，欣赏大师的作品： 学习Python，就顺便看了一下安装自带的接口文档，但是每个函数中都有一个self的参数，结果就顺便百度了一下，大家都已经讨论的很多了，在这总结记录一下，方便自己学习。 self说明 self代表类的实例，而非类 实例11234567class SelfTest: def prt(self): print(self) print(self.__class__) t = SelfTest()t.prt() 计算结果：12&lt;__main__.SelfTest object at 0x00000093147BD518&gt;&lt;class &apos;__main__.SelfTest&apos;&gt; 打印SelfTest信息，打印出该对象的地址，而其类名为SelfTest，说明self为SelfTest的实例。 实例2对于学过Java的人来说，this是比较熟悉的，this为特定关键字，那么self可以改变吗？本实例说明。1234567891011121314class SelfTest: def prt(self): print(self) print(self.__class__) class ThisTest: def prt(this): print(this) print(this.__class__) t = SelfTest()t.prt()t = ThisTest()t.prt() 运行结果：1234&lt;__main__.SelfTest object at 0x0000002D5315DB00&gt;&lt;class &apos;__main__.SelfTest&apos;&gt;&lt;__main__.ThisTest object at 0x0000002D5315DBA8&gt;&lt;class &apos;__main__.ThisTest&apos;&gt; 在Python内部解释器中，Python会将self替换成实例来运行，解释为TestSelf.prt(self),示例如下：1234567891011121314class SelfTest: def prt(self): print(self) print(self.__class__) class ThisTest: def prt(this): print(this) print(this.__class__) t = SelfTest()t.prt()SelfTest.prt(t)ThisTest.prt(t) 运行结果：123456&lt;__main__.SelfTest object at 0x0000024C9F09DB38&gt;&lt;class &apos;__main__.SelfTest&apos;&gt;&lt;__main__.SelfTest object at 0x0000024C9F09DB38&gt;&lt;class &apos;__main__.SelfTest&apos;&gt;&lt;__main__.SelfTest object at 0x0000024C9F09DB38&gt;&lt;class &apos;__main__.SelfTest&apos;&gt; 运行结果即如解释所述。 实例三如果函数没有在定义时知名self实例变量，则在函数内部是不能再进行self调用的，实例如下：123456class Test: def test(): print(self) t = Test()t.test() 运行结果：1234Traceback (most recent call last): File &quot;selfDefinition.py&quot;, line 17, in &lt;module&gt; t.test()TypeError: test() takes 0 positional arguments but 1 was given test中没有指定self实例，当在test的中再进行self调用时，即为非法调用，强行传入一个位置参数。 实例四如果在定义和调用时，都不进行实例self的指定，则该函数为类函数，示例如下：123456class Test: def test(): print(__class__) t = Test()t.test() 运行结果：1234Traceback (most recent call last): File &quot;selfDefinition.py&quot;, line 18, in &lt;module&gt; t.test()TypeError: test() takes 0 positional arguments but 1 was given 该运行结果是因为该函数为类函数，不能通过实例的形式进行调用。如果将运行代码换为1Test.test() 运行结果：1&lt;class &apos;__main__.Test&apos;&gt; 运行正确，类函数的正确调用方式。 不能在函数定义的时候省略，这样函数会认为该函数并没有参数， 实例五正如实例二中所写的，代码中SelfTest和ThisTest都为相应类，但是当传入实例t时，两个函数运行结果都为SelfTest，说明只要参数指定实例，运行中的实例就是该实例，而不是确定的函数所在类的实例。在继承时，传入指定实例，就是那个传入的实例，而不是指定义self的类的实例，具体实例如下：123456789101112class Parent: def pprt(self): print(self) class Child(Parent): def cprt(self): print(self)c = Child()c.cprt()c.pprt()p = Parent()p.pprt() 运行结果：123&lt;__main__.Child object at 0x0000022C2D126080&gt;&lt;__main__.Child object at 0x0000022C2D126080&gt;&lt;__main__.Parent object at 0x0000022C2D1260F0&gt; c的实例为child，不论调用cprt还是pprt，其self都为child。pprt为其调用的父类中的方法，传入子类实例。 实例六在描述符类中，self指的是描述符类的实例1234567891011class Desc: def __get__(self, ins, cls): print(&apos;self in Desc: %s &apos; % self ) print(self, ins, cls)class Test: x = Desc() def prt(self): print(&apos;self in Test: %s&apos; % self)t = Test()t.prt()t.x 运行结果：123self in Test: &lt;__main__.Test object at 0x00000240B95472B0&gt;self in Desc: &lt;__main__.Desc object at 0x00000240B9547240&gt; &lt;__main__.Desc object at 0x00000240B9547240&gt; &lt;__main__.Test object at 0x00000240B95472B0&gt; &lt;class &apos;__main__.Test&apos;&gt; t.prt输出的是t的实例，但是t.x输出的是Desc的实例，这是由于调用t.x，即是Test类的实例t的属性x，由于实例t中并没有定义属性x，所以找到类属性x，而该属性是描述符属性，为Desc类的实例而已，所以此处并没有顶用Test任何方法，直接通过类进行调用也能得到相同的结果。将其上代码换为如下：123t = Test()Test.prt(t)Test.x 运行结果：123self in Test: &lt;__main__.Test object at 0x00000143AA1972E8&gt;self in Desc: &lt;__main__.Desc object at 0x00000143AA197278&gt; &lt;__main__.Desc object at 0x00000143AA197278&gt; None &lt;class &apos;__main__.Test&apos;&gt; 与上述结果一致。题外话：由于在很多时候描述符类中仍然需要知道调用该描述符的实例是谁，所以在描述符类中存在第二个参数ins，用来表示调用它的类实例，所以t.x时可以看到第三行中的运行结果中第二项为。而采用Test.x进行调用时，由于没有实例，所以返回None。 总结 self在定义时需要定义，但是在调用时会自动传入。 self的名字并不是规定死的，但是最好还是按照约定是用self self总是指调用时的类的实例。本文作者：tongtong本文链接：https://stongtong.github.io/2016/05/05/重-庆/版权申明：网站内容为tongtong所有，转载请注明出处。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Next主题内置标签]]></title>
      <url>%2F2017%2F03%2F23%2FNext%E4%B8%BB%E9%A2%98%E5%86%85%E7%BD%AE%E6%A0%87%E7%AD%BE%2F</url>
      <content type="text"><![CDATA[该文章测试next主题中的图片表示，因为看到官网上有很多的内置标签，测试一下，方便以后使用。 字体居中HTML方式1&lt;blockquote class=&quot;blockquote-center&quot;&gt;该部分为文字居中&lt;/blockquote&gt; 该部分为文字居中 内置标签方式1&#123;% centerquote %&#125;blah blah blah&#123;% endcenterquote %&#125; 居中文字标签模式 标签简写模式12&lt;!-- 标签别名 --&gt;&#123;% cq %&#125; blah blah blah &#123;% endcq %&#125; 突破宽度限制图片当使用此标签引用图片时，图片将自动扩大 26%，并突破文章容器的宽度。 此标签使用于需要突出显示的图片, 图片的扩大与容器的偏差从视觉上提升图片的吸引力。 此标签有两种调用方式（详细参看底下示例）： HTML方式：使用这种方式时，为 img 添加属性 class=”full-image”即可。1&lt;img src=&quot;/image-url&quot; class=&quot;full-image&quot; /&gt; 标签方式：使用 fullimage 或者 简写 fi， 并传递图片地址、 alt 和 title 属性即可。 属性之间以逗号分隔。1&#123;% fullimage /image-url, alt, title %&#125; 可以简写为：12&lt;!-- 别名 --&gt;&#123;% fi /image-url, alt, title %&#125; 这里是markdown自带的显示： 以上三种比较，很是明显。 bootstrap callout使用方式1&#123;% note class_name %&#125; Content (md partial supported) &#123;% endnote %&#125; 其中，class_name 可以是以下列表中的一个值：123456defaultprimarysuccessinfowarningdanger 演示效果此类别为default 此类别为primary 此类别为success 此类别为info 此类别为warning 此类别为danger 本文作者：tongtong本文链接：https://stongtong.github.io/2016/05/05/重-庆/版权申明：网站内容为tongtong所有，转载请注明出处。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hexo常用命令记录]]></title>
      <url>%2F2016%2F08%2F30%2FHexo%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%E8%AE%B0%E5%BD%95%2F</url>
      <content type="text"><![CDATA[简写1234567hexo n &quot;我的博客&quot; == hexo new &quot;我的博客&quot; //新建文章hexo new page &quot;我的类别&quot; //新建目录下的pagehexo p == hexo publish //发布草稿到站点,其用法为hexo publish [layout] &lt;title&gt;hexo g == hexo generate //生成hexo s == hexo server //启动服务，当端口冲突时，其可以使用参数p更改端口，具体用法为hexo s -p 端口号hexo d == hexo deploy //部署hexo c == hexo clean //清楚生成文件 hexo中使用模板在hexo根目录下的scaffolds文件下，有生成创建文章的模板，在生成时，可以进行模板指定：1hexo new photo &quot;My Gallery&quot; //photo为指定模板，创建时其会到scaffolds文件下查找photo.md文件，进行相册的创建。 前置声明12345678layout: 布局，默认为posttitle: 文章名称date: 创建时间updated: 修改时间comments: 评论开关tags: 标签categories: 类别permalink: 永久链接 最后基本就是这么多了，以后用到在继续添加。本文作者：tongtong本文链接：https://stongtong.github.io/2016/05/05/重-庆/版权申明：网站内容为tongtong所有，转载请注明出处。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2016%2F08%2F29%2FHello%20World%2F</url>
      <content type="text"><![CDATA[Welcome to XTong note. 本文作者：tongtong本文链接：https://stongtong.github.io/2016/05/05/重-庆/版权申明：网站内容为tongtong所有，转载请注明出处。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[github搭建各站记录]]></title>
      <url>%2F2016%2F08%2F29%2FGitHub%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E7%BD%91%E7%AB%99%E8%AE%B0%E5%BD%95%2F</url>
      <content type="text"><![CDATA[本次搭建主要使用hexo blog自动发布完成 主要步骤1、下载node js和git，安装完成后，在node js中利用npm进行hexo的安装： 1npm install -g hexo-cli 2、在指定目录下初始化hexo目录， 123hexo ini hexocd hexonpm install 这里的目录名称为hexo,将以上软件安装好之后，将原hexo文件夹下的文件目录统一存放在新建的hexo文件下即可，基本的框架搭建完成。 部署功能要将写好的文件进行部署，需要安装插件，安装步骤为 1npm install hexo-deployer-git --save 安装完毕使用hexo d命令进行部署。 RSS功能和mapsite功能进行Rss功能扩展需要安装插件， 1npm install hexo-generator-feed --save 安装完毕后，会在hexo目录中出现node_modules文件夹，然后需要在hexo配置文件和主题配置文件中进行配置如下：1、hexo配置文件12345feed: type: atom path: atom.xml limit: 20 hub: 2、主题配置文件1rss: /atom.xml 然后重启博客，在生成文件时，就会产生atom.xml文件，显示安装成功。安装百度map-site功能1npm install hexo-generator-baidu-mapsite --save 1、在hexo配置文件12baidusitemap: path: baidusitemap.xml 2、在主题配置文件1sitemap: /baidusitemap.xml 重启博客后，点击查看。 百度统计功能注册百度账号，获取下图中指定位置编码，在主题配置文件中进行设置即可。 自定义站点搜索安装插件1npm install hexo-generator-searchdb --save 1、在hexo配置文件12345search: path: search.xml field: post format: html limit: 10000 2、在主题文件中配置12local_search: enable: true 配置分类和标签next主题中的分类和标签要通过新建index文件来产生。具体操作如下运行 hexo new page tags 命令后会产生 source/tags/index.md 这个文件，你要修改这个文件，在里面添加一句话type: “tags”。123title: &quot;tags&quot;date: 2015-03-24 08:58:02 添加：1type: &quot;tags&quot; 然后运行服务器即可访问tags页面了。 在 2015-05-29 06:22:57，”Leon Lin” notifications@github.com 写道：123456789101112$ cd path/to/hexo$ hexo new page tags$ hexo new page categories$ vim source/tags/index.mdadd line: type: &quot;tags&quot;$ vim source/categories/index.mdadd line: type: &quot;categories&quot;$ hexo d -g 做完之後產生的 /tags/index.html 裡面沒有顯示出所用的tag… 添加评论next主题支持多说、友言、畅言、来必力等评论系统，这里说一下，多说已经与17年6月关闭了自己的评论系统，原因估计是不赚钱，友言的评论系统很是难用这里也不多说了，畅言系统要求必须要有国内的ICP备案号，这一点比较坑，自己搭个各站，还要去备案，太过复杂，这里就只剩下来必力了，不过这几种，我都有尝试，下面都会一一介绍。 在友言注册账号，在主题配置文件中找到友言配置项，并输入uid即可1youyan_uid: @@@@@@@@ 友言账号 畅言一样，需要注册，贴入ID即可 其他的都大同小异，这里不再多说了 添加阅读统计在leancloud上注册账号，本账号具体为 然后新建一个应用，应用的名称可以随便选取，在该应用中新建一个class，class权限设置为最大，class名称为Counter，然后进入设置，可以获取ID和Key，如下图： 获取之后，在主题配置文件中进行设定：1234leancloud_visitors: enable: true app_id: C5p2It82joj83Mzm0milY5BK-gzGzoHsz app_key: iDq8etLnrVzoVdfbWoOOow4L 重启blog即可。 本文作者：tongtong本文链接：https://stongtong.github.io/2016/05/05/重-庆/版权申明：网站内容为tongtong所有，转载请注明出处。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[重 庆]]></title>
      <url>%2F2016%2F05%2F05%2F%E9%87%8D-%E5%BA%86%2F</url>
      <content type="text"><![CDATA[重 庆……..赵熙自古西南镇，沧江日夜东。水围巴子国，山压禹王宫。鼓角人声外，华夷市气中。石城非广武，何处问庞雄。 满怀期待，计划一个月的重庆之旅就这样开启了……租辆校车，乘着五一小长假，一群人就这么踏上了重庆之旅。刚到磁器口，人来人往，好不热闹，小饰品店，看着还挺漂亮的（一群大老爷们，呵呵）来根冰棍消消暑，只想说五一的重庆已经热到不行神龙峡一日游，只想说，五一的神龙峡水——冰冷，玩过漂流的几个男人冷到不行，不过还是很开心，也就是洗个热水澡和换个衣服的事情（幸亏衣服带的多，要不然，裸奔？）午夜一点的解放碑，还是人山人海，小卡片满天飞，，，，，，凌晨两点的朝天门，貌似当时下雨了回来的高速上，已经被川A大军全部覆盖 重庆的3日游，还是很happy，想到哪去哪，饿了吃，困了睡，也感谢大哥的导游，唯一美中不足的就是重庆好像并不太适合自驾去，城区山路太难开，是不是文奇？期待下一次的出发……本文作者：tongtong本文链接：https://stongtong.github.io/2016/05/05/重-庆/版权申明：网站内容为tongtong所有，转载请注明出处。]]></content>
    </entry>

    
  
  
</search>
